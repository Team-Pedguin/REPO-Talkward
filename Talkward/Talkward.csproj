<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>
        <Version>0.2.0</Version>

        <RepoGameDir Condition="'$(RepoGameDir)'==''">C:\SteamLibrary\steamapps\common\REPO</RepoGameDir>
        <RepoGameDataDir>$(RepoGameDir)\REPO_Data\Managed</RepoGameDataDir>

        <ILRepackTargetsFile>$(MSBuildThisFileDirectory)ILRepack.targets</ILRepackTargetsFile>
        <NoWarn>CS1685,CS9084,CS9080</NoWarn>
    </PropertyGroup>

    <ItemGroup>
        <Reference Include="Assembly-CSharp">
            <HintPath>$(RepoGameDataDir)\Assembly-CSharp.dll</HintPath>
            <Private>true</Private>
        </Reference>
    </ItemGroup>
    <PropertyGroup>
        <RepoGameDataDir>$(RepoGameDir)\REPO_Data\Managed</RepoGameDataDir>
    </PropertyGroup>

    <Target Name="FindRepoGameDir" BeforeTargets="ResolveReferences" AfterTargets="ResolveAssemblyReferences;ResolveAssemblyReferencesDesignTime" Returns="@(Reference)">
        <SteamFindAppByIdTask AppId="3241660">
            <Output TaskParameter="Path" PropertyName="RepoGameDir"/>
        </SteamFindAppByIdTask>
        <PropertyGroup>
            <RepoGameDataDir>$(RepoGameDir)\REPO_Data\Managed</RepoGameDataDir>
        </PropertyGroup>
        <ItemGroup>
            <Reference Update="Assembly-CSharp">
                <HintPath>$(RepoGameDataDir)\Assembly-CSharp.dll</HintPath>
            </Reference>
        </ItemGroup>
    </Target>

    <ItemGroup>
        <PackageReference Include="BitFaster.Caching" Version="2.5.3"/>
        <PackageReference Include="Krafs.Publicizer" Version="2.3.0" PrivateAssets="all">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="9.0.3"/>
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" />
        <PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.3" />
        <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="9.0.3"/>
        <PackageReference Include="Newtonsoft.Json" Version="13.0.3" PrivateAssets="all"/>
        <PackageReference Include="System.Buffers" Version="4.6.1"/>
        <PackageReference Include="System.IO.Pipelines" Version="9.0.3"/>
        <PackageReference Include="System.Memory" Version="4.6.2"/>
        <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.1.1"/>
        <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.6.2"/>
        <PackageReference Include="Talkward.TwitchLib" Version="1.2.2"/>
        <PackageReference Include="Zehs.REPOLib" Version="1.5.0" PrivateAssets="all"/>
        <PackageReference Include="JetBrains.Annotations" Version="2024.3.0" Aliases="private" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Core" Version="5.4.21.0" IncludeAssets="compile"/>
        <PackageReference Include="BepInEx.PluginInfoProps" Version="2.1.0" PrivateAssets="all"/>
        <PackageReference Include="UnityEngine.Modules" Version="2022.3.21" IncludeAssets="compile" PrivateAssets="all"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\Talkward.Polyfills\Talkward.Polyfills.csproj">
            <Private>True</Private>
        </ProjectReference>
        <!--<ProjectReference Include="..\Talkward.TwitchLib\Talkward.TwitchLib.csproj">
            <Private>True</Private>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
        </ProjectReference>-->
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.40">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Finder.MsBuild.Task" Version="1.3.4" PrivateAssets="all"/>
    </ItemGroup>
    
    <ItemGroup>
        <Publicize Include="REPOLib" />
    </ItemGroup>
    <PropertyGroup>
        <PublicizerRuntimeStrategies>Unsafe;IgnoresAccessChecksTo</PublicizerRuntimeStrategies>
    </PropertyGroup>

    <ItemGroup>
      <Compile Update="SinglyLinkedList.*.cs">
        <DependentUpon>SinglyLinkedList.cs</DependentUpon>
      </Compile>
      <Compile Update="TalkwardCommand.*.cs">
        <DependentUpon>TalkwardCommand.cs</DependentUpon>
      </Compile>
    </ItemGroup>

    <Target Name="GenerateResolvedReferences"
            AfterTargets="ResolvePackageAssets"
            Returns="@(NuGetPackageContentFile)">
        <!--<Message Text="PackageReference: %(PackageReference.Identity)" Importance="high"/>-->
        <FindNetStandardCompatibleContentViaNuGet
                NuGetPackageRoot="$(NuGetPackageRoot)"
                MaximumNetStandard="2.1"
                Packages="@(PackageReference)">
            <Output TaskParameter="LibraryContentFiles"
                    ItemName="NuGetPackageContentFile"/>
        </FindNetStandardCompatibleContentViaNuGet>
    </Target>

    <Target Name="PackForThunderstore" AfterTargets="ILRepacker"
            DependsOnTargets="GenerateResolvedReferences;CollectNuGetReferences">
        <!-- icon.png, manifest.json, README.md, and LICENSE.txt are copied from the root of the project -->
        <!-- TalkwardMod.dll is the merged assembly -->

        <ItemGroup>
            <ThunderstorePackage Include="$(OutputPath)$(AssemblyName)Mod.dll"/>
            <ThunderstorePackage Include="$(OutputPath)$(AssemblyName)Mod.pdb"/>
            <!--<ThunderstorePackage Include="$(OutputPath)$(AssemblyName)Mod.xml" />-->
            <ThunderstorePackage Include="$(SolutionDir)icon.png"/>
            <ThunderstorePackage Include="$(SolutionDir)manifest.json"/>
            <ThunderstorePackage Include="$(SolutionDir)README.md"/>
            <ThunderstorePackage Include="$(SolutionDir)LICENSE.txt"/>
        </ItemGroup>

        <ItemGroup>
            <NuGetPackageLibraryFile Include="@(NuGetPackageContentFile)"
                                     Condition="'%(NuGetPackageContentFile.AssetType)'=='compile' AND '%(NuGetPackageContentFile.IsPrivate)'!='True' "/>
            <PackReference Include="@(NuGetPackageLibraryFile)"
                           Condition="'$(Configuration)'!='Release' OR ('%(NuGetPackageLibraryFile.Extension)'!='.pdb' AND '%(NuGetPackageLibraryFile.Extension)'!='.xml')"/>
            <PackReference Include="@(ResolvedReference)"/>
        </ItemGroup>
        <!--<Message Text="Additional: @(PackReference->'%(Name)')" Importance="high"/>-->
        <!--<Message Text="Add. Files: @(PackReference)" Importance="high"/>-->

        <!-- zip them all up -->
        <Pack
                Overwrite="true"
                Verbose="true"
                Items="@(ThunderstorePackage);@(PackReference)"
                OutputFile="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).new.zip"
                Type="zip"/>
        <!-- move the old zip -->
        <Move SourceFiles="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).zip"
              DestinationFiles="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).old.zip"
              ContinueOnError="true"/>
        <!-- move the new zip -->
        <Move SourceFiles="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).new.zip"
              DestinationFiles="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).zip"/>
        <!-- attempt to delete the old zip -->
        <Delete Files="$(OutputPath)TeamPedguin-$(AssemblyName)-$(Version).old.zip"
                ContinueOnError="true"/>
    </Target>

    <Target Name="CollectNuGetReferences" AfterTargets="ResolvePackageAssets" BeforeTargets="Compile">
        <ItemGroup>
            <NuGetReference Include="@(Reference)" Condition="$([System.String]::Copy('%(Identity)').StartsWith('$(NuGetPackageRoot)'))">
                <Name>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</Name>
            </NuGetReference>
            <!--<Message Text="NuGetReference: @(NuGetReference)" Importance="high"/>-->
        </ItemGroup>
    </Target>
    <!--
    <Target Name="ReviewAssemblyRefs" AfterTargets="Build" BeforeTargets="ILRepacker">
        <ItemGroup>
            <ReferenceAssemblyName Include="MonoMod.%2A" />
        </ItemGroup>
        <IdentifyCauseOfAssemblyReference
                MessageImportance="high"
                Verbose="true"
                SourceAssemblyPaths="$(OutputPath)$(AssemblyName).dll"
                ReferenceAssemblyNames="@(ReferenceAssemblyName)">
            <Output TaskParameter="Causes" ItemName="AssemblyReferenceCause"/>
        </IdentifyCauseOfAssemblyReference>
        <Message Text="AssemblyReferenceCauses: %(AssemblyReferenceCause.Description)" Importance="high"/>
        <ItemGroup>
            <ReferenceAssemblyName Remove="@(ReferenceAssemblyName)" />
        </ItemGroup>
    </Target>
    
    <Target Name="ReviewAssemblyRefs2" AfterTargets="ILRepacker">
        <ItemGroup>
            <ReferenceAssemblyName Include="MonoMod.%2A" />
        </ItemGroup>
        <IdentifyCauseOfAssemblyReference
                MessageImportance="high"
                Verbose="true"
                SourceAssemblyPaths="$(OutputPath)$(AssemblyName)Mod.dll"
                ReferenceAssemblyNames="@(ReferenceAssemblyName)">
            <Output TaskParameter="Causes" ItemName="AssemblyReferenceCause"/>
        </IdentifyCauseOfAssemblyReference>
        <Message Text="AssemblyReferenceCauses: %(AssemblyReferenceCause.Description)" Importance="high"/>
        <ItemGroup>
            <ReferenceAssemblyName Remove="@(ReferenceAssemblyName)" />
        </ItemGroup>
    </Target>
    -->
</Project>
